import { AmplifyError, AmplifyFault, AmplifyUserError, } from '@aws-amplify/platform-core';
import stripANSI from 'strip-ansi';
/**
 * Transforms CDK error messages to human readable ones
 */
export class CdkErrorMapper {
    formatter;
    multiLineEolRegex = '[\r\n]+';
    /**
     * Instantiate with a formatter that will be used for formatting CLI commands in error messages
     */
    constructor(formatter) {
        this.formatter = formatter;
    }
    getAmplifyError = (error) => {
        let underlyingError = error;
        // Check if there was an Amplify error thrown during child process execution
        const amplifyError = AmplifyError.fromStderr(error.message);
        if (amplifyError) {
            return amplifyError;
        }
        const errorMessage = stripANSI(error.message);
        const matchingError = this.getKnownErrors().find((knownError) => knownError.errorRegex.test(errorMessage));
        if (matchingError) {
            // Extract meaningful contextual information if available
            const matchGroups = errorMessage.match(matchingError.errorRegex);
            if (matchGroups && matchGroups.length > 1) {
                // If the contextual information can be used in the error message use it, else consider it as a downstream cause
                if (matchGroups.groups) {
                    for (const [key, value] of Object.entries(matchGroups.groups)) {
                        const placeHolder = `{${key}}`;
                        if (matchingError.humanReadableErrorMessage.includes(placeHolder) ||
                            matchingError.resolutionMessage.includes(placeHolder)) {
                            matchingError.humanReadableErrorMessage =
                                matchingError.humanReadableErrorMessage.replace(placeHolder, value);
                            matchingError.resolutionMessage =
                                matchingError.resolutionMessage.replace(placeHolder, value);
                            // reset the stderr dump in the underlying error
                            underlyingError = undefined;
                        }
                    }
                    // remove any trailing EOL
                    matchingError.humanReadableErrorMessage =
                        matchingError.humanReadableErrorMessage.replace(new RegExp(`${this.multiLineEolRegex}$`), '');
                }
                else {
                    underlyingError.message = matchGroups[0];
                }
            }
            return matchingError.classification === 'ERROR'
                ? new AmplifyUserError(matchingError.errorName, {
                    message: matchingError.humanReadableErrorMessage,
                    resolution: matchingError.resolutionMessage,
                }, underlyingError)
                : new AmplifyFault(matchingError.errorName, {
                    message: matchingError.humanReadableErrorMessage,
                    resolution: matchingError.resolutionMessage,
                }, underlyingError);
        }
        return AmplifyError.fromError(error);
    };
    getKnownErrors = () => [
        {
            errorRegex: /ExpiredToken: .*|(Error|InvalidClientTokenId): The security token included in the request is (expired|invalid)/,
            humanReadableErrorMessage: 'The security token included in the request is invalid.',
            resolutionMessage: "Please update your AWS credentials. You can do this by running `aws configure` or by updating your AWS credentials file. If you're using temporary credentials, you may need to obtain new ones.",
            errorName: 'ExpiredTokenError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Access Denied/,
            humanReadableErrorMessage: 'The deployment role does not have sufficient permissions to perform this deployment.',
            resolutionMessage: 'Ensure your deployment role has the AmplifyBackendDeployFullAccess role along with any additional permissions required to deploy your backend definition.',
            errorName: 'AccessDeniedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /(Has the environment been bootstrapped)|(Is account \d+ bootstrapped)|(Is this account bootstrapped)/,
            humanReadableErrorMessage: 'This AWS account and region has not been bootstrapped.',
            resolutionMessage: 'Run `cdk bootstrap aws://{YOUR_ACCOUNT_ID}/{YOUR_REGION}` locally to resolve this.',
            errorName: 'BootstrapNotDetectedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /This CDK deployment requires bootstrap stack version \S+, found \S+\. Please run 'cdk bootstrap'\./,
            humanReadableErrorMessage: 'This AWS account and region has outdated CDK bootstrap stack.',
            resolutionMessage: 'Run `cdk bootstrap aws://{YOUR_ACCOUNT_ID}/{YOUR_REGION}` locally to re-bootstrap.',
            errorName: 'BootstrapOutdatedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /This CDK deployment requires bootstrap stack version \S+, but during the confirmation via SSM parameter \S+ the following error occurred: AccessDeniedException/,
            humanReadableErrorMessage: 'Unable to detect CDK bootstrap stack due to permission issues.',
            resolutionMessage: "Ensure that AWS credentials have an IAM policy that grants read access to 'arn:aws:ssm:*:*:parameter/cdk-bootstrap/*' SSM parameters.",
            errorName: 'BootstrapDetectionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /This CDK CLI is not compatible with the CDK library used by your application\. Please upgrade the CLI to the latest version\./,
            humanReadableErrorMessage: "Installed 'aws-cdk' is not compatible with installed 'aws-cdk-lib'.",
            resolutionMessage: "Make sure that version of 'aws-cdk' is greater or equal to version of 'aws-cdk-lib'",
            errorName: 'CDKVersionMismatchError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Command cdk not found/,
            humanReadableErrorMessage: 'Unable to detect cdk installation',
            resolutionMessage: "Ensure dependencies in your project are installed with your package manager. For example, by running 'yarn install' or 'npm install'",
            errorName: 'CDKNotFoundError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`(SyntaxError|ReferenceError|TypeError)( \\[[A-Z_]+])?:((?:.|${this.multiLineEolRegex})*?at .*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'SyntaxError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Unable to resolve AWS account to use/,
            humanReadableErrorMessage: 'Unable to resolve AWS account to use. It must be either configured when you define your CDK Stack, or through the environment',
            resolutionMessage: 'You can retry your last request as this is most likely a transient issue: https://github.com/aws/aws-cdk/issues/24744. If the error persists ensure your local AWS credentials are valid.',
            errorName: 'CDKResolveAWSAccountError',
            classification: 'ERROR',
        },
        {
            errorRegex: /EACCES(.*)/,
            humanReadableErrorMessage: 'File permissions error',
            resolutionMessage: 'Check that you have the right access permissions to the mentioned file',
            errorName: 'FilePermissionsError',
            classification: 'ERROR',
        },
        {
            errorRegex: /EPERM: operation not permitted, rename (?<fileName>(.*)\/synth\.lock\.\S+) â†’ '(.*)\/synth\.lock'/,
            humanReadableErrorMessage: 'Not permitted to rename file: {fileName}',
            resolutionMessage: `Try running the command again and ensure that only one instance of sandbox is running. If it still doesn't work check the permissions of '.amplify' folder`,
            errorName: 'FilePermissionsError',
            classification: 'ERROR',
        },
        {
            errorRegex: /EPERM: operation not permitted, mkdir '(.*).amplify\/artifacts\/cdk.out'/,
            humanReadableErrorMessage: `Not permitted to create the directory '.amplify/artifacts/cdk.out'`,
            resolutionMessage: `Check the permissions of '.amplify' folder and try running the command again`,
            errorName: 'FilePermissionsError',
            classification: 'ERROR',
        },
        {
            errorRegex: /EPERM: operation not permitted, (unlink|open) (?<fileName>(.*)\.lock\S+)/,
            humanReadableErrorMessage: 'Operation not permitted on file: {fileName}',
            resolutionMessage: `Check the permissions of '.amplify' folder and try running the command again`,
            errorName: 'FilePermissionsError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`\\[ERR_MODULE_NOT_FOUND\\]:(.*)${this.multiLineEolRegex}|Error: Cannot find module (.*)`),
            humanReadableErrorMessage: 'Cannot find module',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for missing file or package imports. Try installing them with your package manager.',
            errorName: 'ModuleNotFoundError',
            classification: 'ERROR',
        },
        {
            // Truncate the cdk error message's second line (Invoke the CLI in sequence, or use '--output' to synth into different directories.)
            errorRegex: /Another CLI (.*) is currently(.*)\. |Other CLIs (.*) are currently reading from(.*)\. /,
            humanReadableErrorMessage: 'Multiple sandbox instances detected.',
            resolutionMessage: 'Make sure only one instance of sandbox is running for this project',
            errorName: 'MultipleSandboxInstancesError',
            classification: 'ERROR',
        },
        {
            errorRegex: /InvalidParameterValueException:(.*) (size must be smaller than|exceeds the maximum allowed size of) (?<maxSize>\d+) bytes/,
            humanReadableErrorMessage: 'Maximum Lambda size exceeded',
            resolutionMessage: 'Make sure your Lambda bundled packages with layers and dependencies is smaller than {maxSize} bytes unzipped.',
            errorName: 'LambdaMaxSizeExceededError',
            classification: 'ERROR',
        },
        {
            errorRegex: /InvalidParameterValueException: Uploaded file must be a non-empty zip/,
            humanReadableErrorMessage: 'Lambda bundled into an empty zip',
            resolutionMessage: `Try removing '.amplify/artifacts' then running the command again. If it still doesn't work, see https://github.com/aws/aws-cdk/issues/18459 for more methods.`,
            errorName: 'LambdaEmptyZipFault',
            classification: 'FAULT',
        },
        {
            errorRegex: /User:(.*) is not authorized to perform: lambda:GetLayerVersion on resource:(.*) because no resource-based policy allows the lambda:GetLayerVersion action/,
            humanReadableErrorMessage: 'Unable to get Lambda layer version',
            resolutionMessage: 'Make sure layer ARNs are correct and layer regions match function region',
            errorName: 'GetLambdaLayerVersionError',
            classification: 'ERROR',
        },
        {
            //This has some overlap with "User:__ is not authorized to perform:__ on resource: __" - some resources cannot be deleted due to lack of permissions
            errorRegex: /The stack named (?<stackName>.*) is in a failed state. You may need to delete it from the AWS console : DELETE_FAILED \(The following resource\(s\) failed to delete: (?<resources>.*). \)/,
            humanReadableErrorMessage: 'The CloudFormation deletion failed due to {stackName} being in DELETE_FAILED state. Ensure all your resources are able to be deleted',
            resolutionMessage: 'The following resource(s) failed to delete: {resources}. Check the error message for more details and ensure your resources are in a state where they can be deleted. Check the CloudFormation AWS Console for this stack to find additional information.',
            errorName: 'CloudFormationDeletionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /User:(.*) is not authorized to perform:(.*) on resource:(?<resource>.*) because no identity-based policy allows the (?<action>.*) action/,
            humanReadableErrorMessage: 'Unable to deploy due to insufficient permissions',
            resolutionMessage: 'Ensure you have permissions to call {action} for {resource}',
            errorName: 'AccessDeniedError',
            classification: 'ERROR',
        },
        {
            errorRegex: /User:(.*) is not authorized to perform:(?<action>.*) on resource:(?<resource>.*)/,
            humanReadableErrorMessage: 'Unable to deploy due to insufficient permissions',
            resolutionMessage: 'Ensure you have permissions to call {action} for {resource}',
            errorName: 'AccessDeniedError',
            classification: 'ERROR',
        },
        {
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`\\[esbuild Error\\]: ((?:.|${this.multiLineEolRegex})*?at .*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`[âœ˜X] \\[ERROR\\] ((?:.|${this.multiLineEolRegex})*error.*)`),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            // If there are multiple errors, capture all lines containing the errors
            errorRegex: new RegExp(`(\\[TransformError\\]|Error): Transform failed with .* error(s?):${this.multiLineEolRegex}(?<esBuildErrorMessage>(.*ERROR:.*${this.multiLineEolRegex})+)`),
            humanReadableErrorMessage: '{esBuildErrorMessage}',
            resolutionMessage: 'Fix the above mentioned type or syntax error in your backend definition.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            // Captures other forms of transform error
            errorRegex: new RegExp(`Error \\[TransformError\\]:(${this.multiLineEolRegex}|\\s)?(?<esBuildErrorMessage>(.*(${this.multiLineEolRegex})?)+)`),
            humanReadableErrorMessage: '{esBuildErrorMessage}',
            resolutionMessage: 'Make sure esbuild is installed and is compatible with the platform you are currently using.',
            errorName: 'ESBuildError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Amplify Backend not found in/,
            humanReadableErrorMessage: 'Backend definition could not be found in amplify directory.',
            resolutionMessage: 'Ensure that the amplify/backend.(ts|js) file exists',
            errorName: 'FileConventionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Amplify (.*) must be defined in (.*)/,
            humanReadableErrorMessage: 'File name or path for backend definition are incorrect.',
            resolutionMessage: 'Ensure that the amplify/backend.(ts|js) file exists',
            errorName: 'FileConventionError',
            classification: 'ERROR',
        },
        {
            errorRegex: /Updates are not allowed for property/,
            humanReadableErrorMessage: 'The changes that you are trying to apply are not supported.',
            resolutionMessage: 'The resources referenced in the error message must be deleted and recreated to apply the changes.',
            errorName: 'CFNUpdateNotSupportedError',
            classification: 'ERROR',
        },
        {
            // This error originates from Cognito service when user tries to change UserPool attributes which is not allowed
            // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html
            // Remapping to `UpdateNotSupported` will allow sandbox to prompt users for resetting their environment
            errorRegex: /Invalid AttributeDataType input, consider using the provided AttributeDataType enum/,
            humanReadableErrorMessage: 'User pool attributes cannot be changed after a user pool has been created.',
            resolutionMessage: 'To change these attributes, remove `defineAuth` from your backend, deploy, then add it back. Note that removing `defineAuth` and deploying will delete any users stored in your UserPool.',
            errorName: 'CFNUpdateNotSupportedError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`npm error code EJSONPARSE${this.multiLineEolRegex}npm error path (?<filePath>.*/package\\.json)${this.multiLineEolRegex}(npm error (.*)${this.multiLineEolRegex})*`),
            humanReadableErrorMessage: 'The {filePath} is not a valid JSON.',
            resolutionMessage: `Check package.json file and make sure it is a valid JSON.`,
            errorName: 'InvalidPackageJsonError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`(?<npmError>(npm error|npm ERR!) code ENOENT${this.multiLineEolRegex}((npm error|npm ERR!) (.*)${this.multiLineEolRegex})*)`),
            humanReadableErrorMessage: 'NPM error occurred: {npmError}',
            resolutionMessage: `See https://docs.npmjs.com/common-errors for resolution.`,
            errorName: 'CommonNPMError',
            classification: 'ERROR',
        },
        {
            // Error: .* is printed to stderr during cdk synth
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`^Error: (.*${this.multiLineEolRegex}.*at.*)`, 'm'),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'BackendSynthError',
            classification: 'ERROR',
        },
        {
            // This happens when 'defineBackend' call is missing in customer's app.
            // 'defineBackend' creates CDK app in memory. If it's missing then no cdk.App exists in memory and nothing is rendered.
            // During 'cdk synth' CDK CLI attempts to read CDK assembly after calling customer's app.
            // But no files are rendered causing it to fail.
            errorRegex: /ENOENT: no such file or directory, open '\.amplify.artifacts.cdk\.out.manifest\.json'/,
            humanReadableErrorMessage: 'The Amplify backend definition is missing `defineBackend` call.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder. Ensure that `amplify/backend.ts` contains `defineBackend` call.',
            errorName: 'MissingDefineBackendError',
            classification: 'ERROR',
        },
        {
            // "Catch all": the backend entry point file is referenced in the stack indicating a problem in customer code
            errorRegex: /amplify\/backend/,
            humanReadableErrorMessage: 'Unable to build Amplify backend.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'BackendBuildError',
            classification: 'ERROR',
        },
        {
            // We capture the parameter name to show relevant error message
            errorRegex: /Failed to retrieve backend secret (?<secretName>.*) for.*ParameterNotFound/,
            humanReadableErrorMessage: `The secret {secretName} specified in the backend does not exist.`,
            resolutionMessage: `Create secrets using the command ${this.formatter.normalizeAmpxCommand('sandbox secret set')}. For more information, see https://docs.amplify.aws/gen2/deploy-and-host/sandbox-environments/features/#set-secrets`,
            errorName: 'SecretNotSetError',
            classification: 'ERROR',
        },
        {
            errorRegex: /BadRequestException: The code contains one or more errors|The code contains one or more errors.*AppSync/,
            humanReadableErrorMessage: `A custom resolver used in your defineData contains one or more errors`,
            resolutionMessage: `Check for any syntax errors in your custom resolvers code.`,
            errorName: 'AppSyncResolverSyntaxError',
            classification: 'ERROR',
        },
        {
            errorRegex: new RegExp(`amplify-.*-(branch|sandbox)-.*fail: (?<publishFailure>.*)${this.multiLineEolRegex}.*Failed to publish asset`, 'm'),
            humanReadableErrorMessage: `CDK failed to publish assets due to '{publishFailure}'`,
            resolutionMessage: `Check the error message for more details.`,
            errorName: 'CDKAssetPublishError',
            classification: 'ERROR',
        },
        // Generic error printed by CDK. Order matters so keep this towards the bottom of this list
        {
            // Error: .* is printed to stderr during cdk synth
            // Also extracts the first line in the stack where the error happened
            errorRegex: new RegExp(`^Error: (.*${this.multiLineEolRegex}.*at.*)`, 'm'),
            humanReadableErrorMessage: 'Unable to build the Amplify backend definition.',
            resolutionMessage: 'Check your backend definition in the `amplify` folder for syntax and type errors.',
            errorName: 'BackendSynthError',
            classification: 'ERROR',
        },
        {
            errorRegex: /(?<stackName>amplify-[a-z0-9-]+)(.*) failed: ValidationError: Stack:(.*) is in (?<state>.*) state and can not be updated/,
            humanReadableErrorMessage: 'The CloudFormation deployment failed due to {stackName} being in {state} state.',
            resolutionMessage: 'Find more information in the CloudFormation AWS Console for this stack.',
            errorName: 'CloudFormationDeploymentError',
            classification: 'ERROR',
        },
        {
            // Note that the order matters, this should be the last as it captures generic CFN error
            errorRegex: new RegExp(`Deployment failed: (.*)${this.multiLineEolRegex}|The stack named (.*) failed (to deploy:|creation,) (.*)`),
            humanReadableErrorMessage: 'The CloudFormation deployment has failed.',
            resolutionMessage: 'Find more information in the CloudFormation AWS Console for this stack.',
            errorName: 'CloudFormationDeploymentError',
            classification: 'ERROR',
        },
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2Vycm9yX21hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jZGtfZXJyb3JfbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxZQUFZLEVBRVosWUFBWSxFQUNaLGdCQUFnQixHQUNqQixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sU0FBUyxNQUFNLFlBQVksQ0FBQztBQUduQzs7R0FFRztBQUNILE1BQU0sT0FBTyxjQUFjO0lBS0k7SUFKckIsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBQ3RDOztPQUVHO0lBQ0gsWUFBNkIsU0FBeUM7UUFBekMsY0FBUyxHQUFULFNBQVMsQ0FBZ0M7SUFBRyxDQUFDO0lBRTFFLGVBQWUsR0FBRyxDQUNoQixLQUFZLEVBQytCLEVBQUU7UUFDN0MsSUFBSSxlQUFlLEdBQXNCLEtBQUssQ0FBQztRQUUvQyw0RUFBNEU7UUFDNUUsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxZQUFZLENBQUM7U0FDckI7UUFFRCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUM5RCxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FDekMsQ0FBQztRQUVGLElBQUksYUFBYSxFQUFFO1lBQ2pCLHlEQUF5RDtZQUN6RCxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUVqRSxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDekMsZ0hBQWdIO2dC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O1lBQzFDLGNBQWMsRUFBRSxPQUFPO1NBQ3hCO0tBQ0YsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeUVycm9yLFxuICBBbXBsaWZ5RXJyb3JDbGFzc2lmaWNhdGlvbixcbiAgQW1wbGlmeUZhdWx0LFxuICBBbXBsaWZ5VXNlckVycm9yLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgc3RyaXBBTlNJIGZyb20gJ3N0cmlwLWFuc2knO1xuaW1wb3J0IHsgQmFja2VuZERlcGxveWVyT3V0cHV0Rm9ybWF0dGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtcyBDREsgZXJyb3IgbWVzc2FnZXMgdG8gaHVtYW4gcmVhZGFibGUgb25lc1xuICovXG5leHBvcnQgY2xhc3MgQ2RrRXJyb3JNYXBwZXIge1xuICBwcml2YXRlIG11bHRpTGluZUVvbFJlZ2V4ID0gJ1tcXHJcXG5dKyc7XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSB3aXRoIGEgZm9ybWF0dGVyIHRoYXQgd2lsbCBiZSB1c2VkIGZvciBmb3JtYXR0aW5nIENMSSBjb21tYW5kcyBpbiBlcnJvciBtZXNzYWdlc1xuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBmb3JtYXR0ZXI6IEJhY2tlbmREZXBsb3llck91dHB1dEZvcm1hdHRlcikge31cblxuICBnZXRBbXBsaWZ5RXJyb3IgPSAoXG4gICAgZXJyb3I6IEVycm9yXG4gICk6IEFtcGxpZnlFcnJvcjxDREtEZXBsb3ltZW50RXJyb3IgfCBzdHJpbmc+ID0+IHtcbiAgICBsZXQgdW5kZXJseWluZ0Vycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IGVycm9yO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlcmUgd2FzIGFuIEFtcGxpZnkgZXJyb3IgdGhyb3duIGR1cmluZyBjaGlsZCBwcm9jZXNzIGV4ZWN1dGlvblxuICAgIGNvbnN0IGFtcGxpZnlFcnJvciA9IEFtcGxpZnlFcnJvci5mcm9tU3RkZXJyKGVycm9yLm1lc3NhZ2UpO1xuICAgIGlmIChhbXBsaWZ5RXJyb3IpIHtcbiAgICAgIHJldHVybiBhbXBsaWZ5RXJyb3I7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gc3RyaXBBTlNJKGVycm9yLm1lc3NhZ2UpO1xuICAgIGNvbnN0IG1hdGNoaW5nRXJyb3IgPSB0aGlzLmdldEtub3duRXJyb3JzKCkuZmluZCgoa25vd25FcnJvcikgPT5cbiAgICAgIGtub3duRXJyb3IuZXJyb3JSZWdleC50ZXN0KGVycm9yTWVzc2FnZSlcbiAgICApO1xuXG4gICAgaWYgKG1hdGNoaW5nRXJyb3IpIHtcbiAgICAgIC8vIEV4dHJhY3QgbWVhbmluZ2Z1bCBjb250ZXh0dWFsIGluZm9ybWF0aW9uIGlmIGF2YWlsYWJsZVxuICAgICAgY29uc3QgbWF0Y2hHcm91cHMgPSBlcnJvck1lc3NhZ2UubWF0Y2gobWF0Y2hpbmdFcnJvci5lcnJvclJlZ2V4KTtcblxuICAgICAgaWYgKG1hdGNoR3JvdXBzICYmIG1hdGNoR3JvdXBzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gSWYgdGhlIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gY2FuIGJlIHVzZWQgaW4gdGhlIGVycm9yIG1lc3NhZ2UgdXNlIGl0LCBlbHNlIGNvbnNpZGVyIGl0IGFzIGEgZG93bnN0cmVhbSBjYXVzZVxuICAgICAgICBpZiAobWF0Y2hHcm91cHMuZ3JvdXBzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobWF0Y2hHcm91cHMuZ3JvdXBzKSkge1xuICAgICAgICAgICAgY29uc3QgcGxhY2VIb2xkZXIgPSBgeyR7a2V5fX1gO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2UuaW5jbHVkZXMocGxhY2VIb2xkZXIpIHx8XG4gICAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IucmVzb2x1dGlvbk1lc3NhZ2UuaW5jbHVkZXMocGxhY2VIb2xkZXIpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgbWF0Y2hpbmdFcnJvci5odW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlID1cbiAgICAgICAgICAgICAgICBtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2UucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgIHBsYWNlSG9sZGVyLFxuICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IucmVzb2x1dGlvbk1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IucmVzb2x1dGlvbk1lc3NhZ2UucmVwbGFjZShwbGFjZUhvbGRlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAvLyByZXNldCB0aGUgc3RkZXJyIGR1bXAgaW4gdGhlIHVuZGVybHlpbmcgZXJyb3JcbiAgICAgICAgICAgICAgdW5kZXJseWluZ0Vycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyByZW1vdmUgYW55IHRyYWlsaW5nIEVPTFxuICAgICAgICAgIG1hdGNoaW5nRXJyb3IuaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZSA9XG4gICAgICAgICAgICBtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2UucmVwbGFjZShcbiAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSRgKSxcbiAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5kZXJseWluZ0Vycm9yLm1lc3NhZ2UgPSBtYXRjaEdyb3Vwc1swXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0Y2hpbmdFcnJvci5jbGFzc2lmaWNhdGlvbiA9PT0gJ0VSUk9SJ1xuICAgICAgICA/IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgbWF0Y2hpbmdFcnJvci5lcnJvck5hbWUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IG1hdGNoaW5nRXJyb3IuaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogbWF0Y2hpbmdFcnJvci5yZXNvbHV0aW9uTWVzc2FnZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bmRlcmx5aW5nRXJyb3JcbiAgICAgICAgICApXG4gICAgICAgIDogbmV3IEFtcGxpZnlGYXVsdChcbiAgICAgICAgICAgIG1hdGNoaW5nRXJyb3IuZXJyb3JOYW1lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiBtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246IG1hdGNoaW5nRXJyb3IucmVzb2x1dGlvbk1lc3NhZ2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5kZXJseWluZ0Vycm9yXG4gICAgICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIEFtcGxpZnlFcnJvci5mcm9tRXJyb3IoZXJyb3IpO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0S25vd25FcnJvcnMgPSAoKTogQXJyYXk8e1xuICAgIGVycm9yUmVnZXg6IFJlZ0V4cDtcbiAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiBzdHJpbmc7XG4gICAgcmVzb2x1dGlvbk1lc3NhZ2U6IHN0cmluZztcbiAgICBlcnJvck5hbWU6IENES0RlcGxveW1lbnRFcnJvcjtcbiAgICBjbGFzc2lmaWNhdGlvbjogQW1wbGlmeUVycm9yQ2xhc3NpZmljYXRpb247XG4gIH0+ID0+IFtcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvRXhwaXJlZFRva2VuOiAuKnwoRXJyb3J8SW52YWxpZENsaWVudFRva2VuSWQpOiBUaGUgc2VjdXJpdHkgdG9rZW4gaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QgaXMgKGV4cGlyZWR8aW52YWxpZCkvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ1RoZSBzZWN1cml0eSB0b2tlbiBpbmNsdWRlZCBpbiB0aGUgcmVxdWVzdCBpcyBpbnZhbGlkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgXCJQbGVhc2UgdXBkYXRlIHlvdXIgQVdTIGNyZWRlbnRpYWxzLiBZb3UgY2FuIGRvIHRoaXMgYnkgcnVubmluZyBgYXdzIGNvbmZpZ3VyZWAgb3IgYnkgdXBkYXRpbmcgeW91ciBBV1MgY3JlZGVudGlhbHMgZmlsZS4gSWYgeW91J3JlIHVzaW5nIHRlbXBvcmFyeSBjcmVkZW50aWFscywgeW91IG1heSBuZWVkIHRvIG9idGFpbiBuZXcgb25lcy5cIixcbiAgICAgIGVycm9yTmFtZTogJ0V4cGlyZWRUb2tlbkVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogL0FjY2VzcyBEZW5pZWQvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ1RoZSBkZXBsb3ltZW50IHJvbGUgZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIHBlcmZvcm0gdGhpcyBkZXBsb3ltZW50LicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0Vuc3VyZSB5b3VyIGRlcGxveW1lbnQgcm9sZSBoYXMgdGhlIEFtcGxpZnlCYWNrZW5kRGVwbG95RnVsbEFjY2VzcyByb2xlIGFsb25nIHdpdGggYW55IGFkZGl0aW9uYWwgcGVybWlzc2lvbnMgcmVxdWlyZWQgdG8gZGVwbG95IHlvdXIgYmFja2VuZCBkZWZpbml0aW9uLicsXG4gICAgICBlcnJvck5hbWU6ICdBY2Nlc3NEZW5pZWRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC8oSGFzIHRoZSBlbnZpcm9ubWVudCBiZWVuIGJvb3RzdHJhcHBlZCl8KElzIGFjY291bnQgXFxkKyBib290c3RyYXBwZWQpfChJcyB0aGlzIGFjY291bnQgYm9vdHN0cmFwcGVkKS8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVGhpcyBBV1MgYWNjb3VudCBhbmQgcmVnaW9uIGhhcyBub3QgYmVlbiBib290c3RyYXBwZWQuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnUnVuIGBjZGsgYm9vdHN0cmFwIGF3czovL3tZT1VSX0FDQ09VTlRfSUR9L3tZT1VSX1JFR0lPTn1gIGxvY2FsbHkgdG8gcmVzb2x2ZSB0aGlzLicsXG4gICAgICBlcnJvck5hbWU6ICdCb290c3RyYXBOb3REZXRlY3RlZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL1RoaXMgQ0RLIGRlcGxveW1lbnQgcmVxdWlyZXMgYm9vdHN0cmFwIHN0YWNrIHZlcnNpb24gXFxTKywgZm91bmQgXFxTK1xcLiBQbGVhc2UgcnVuICdjZGsgYm9vdHN0cmFwJ1xcLi8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVGhpcyBBV1MgYWNjb3VudCBhbmQgcmVnaW9uIGhhcyBvdXRkYXRlZCBDREsgYm9vdHN0cmFwIHN0YWNrLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1J1biBgY2RrIGJvb3RzdHJhcCBhd3M6Ly97WU9VUl9BQ0NPVU5UX0lEfS97WU9VUl9SRUdJT059YCBsb2NhbGx5IHRvIHJlLWJvb3RzdHJhcC4nLFxuICAgICAgZXJyb3JOYW1lOiAnQm9vdHN0cmFwT3V0ZGF0ZWRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9UaGlzIENESyBkZXBsb3ltZW50IHJlcXVpcmVzIGJvb3RzdHJhcCBzdGFjayB2ZXJzaW9uIFxcUyssIGJ1dCBkdXJpbmcgdGhlIGNvbmZpcm1hdGlvbiB2aWEgU1NNIHBhcmFtZXRlciBcXFMrIHRoZSBmb2xsb3dpbmcgZXJyb3Igb2NjdXJyZWQ6IEFjY2Vzc0RlbmllZEV4Y2VwdGlvbi8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGRldGVjdCBDREsgYm9vdHN0cmFwIHN0YWNrIGR1ZSB0byBwZXJtaXNzaW9uIGlzc3Vlcy4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgIFwiRW5zdXJlIHRoYXQgQVdTIGNyZWRlbnRpYWxzIGhhdmUgYW4gSUFNIHBvbGljeSB0aGF0IGdyYW50cyByZWFkIGFjY2VzcyB0byAnYXJuOmF3czpzc206KjoqOnBhcmFtZXRlci9jZGstYm9vdHN0cmFwLyonIFNTTSBwYXJhbWV0ZXJzLlwiLFxuICAgICAgZXJyb3JOYW1lOiAnQm9vdHN0cmFwRGV0ZWN0aW9uRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvVGhpcyBDREsgQ0xJIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIENESyBsaWJyYXJ5IHVzZWQgYnkgeW91ciBhcHBsaWNhdGlvblxcLiBQbGVhc2UgdXBncmFkZSB0aGUgQ0xJIHRvIHRoZSBsYXRlc3QgdmVyc2lvblxcLi8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICBcIkluc3RhbGxlZCAnYXdzLWNkaycgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBpbnN0YWxsZWQgJ2F3cy1jZGstbGliJy5cIixcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICBcIk1ha2Ugc3VyZSB0aGF0IHZlcnNpb24gb2YgJ2F3cy1jZGsnIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdmVyc2lvbiBvZiAnYXdzLWNkay1saWInXCIsXG4gICAgICBlcnJvck5hbWU6ICdDREtWZXJzaW9uTWlzbWF0Y2hFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IC9Db21tYW5kIGNkayBub3QgZm91bmQvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ1VuYWJsZSB0byBkZXRlY3QgY2RrIGluc3RhbGxhdGlvbicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgXCJFbnN1cmUgZGVwZW5kZW5jaWVzIGluIHlvdXIgcHJvamVjdCBhcmUgaW5zdGFsbGVkIHdpdGggeW91ciBwYWNrYWdlIG1hbmFnZXIuIEZvciBleGFtcGxlLCBieSBydW5uaW5nICd5YXJuIGluc3RhbGwnIG9yICducG0gaW5zdGFsbCdcIixcbiAgICAgIGVycm9yTmFtZTogJ0NES05vdEZvdW5kRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgKFN5bnRheEVycm9yfFJlZmVyZW5jZUVycm9yfFR5cGVFcnJvcikoIFxcXFxbW0EtWl9dK10pPzooKD86Lnwke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KSo/YXQgLiopYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVbmFibGUgdG8gYnVpbGQgdGhlIEFtcGxpZnkgYmFja2VuZCBkZWZpbml0aW9uLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0NoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyIGZvciBzeW50YXggYW5kIHR5cGUgZXJyb3JzLicsXG4gICAgICBlcnJvck5hbWU6ICdTeW50YXhFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IC9VbmFibGUgdG8gcmVzb2x2ZSBBV1MgYWNjb3VudCB0byB1c2UvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ1VuYWJsZSB0byByZXNvbHZlIEFXUyBhY2NvdW50IHRvIHVzZS4gSXQgbXVzdCBiZSBlaXRoZXIgY29uZmlndXJlZCB3aGVuIHlvdSBkZWZpbmUgeW91ciBDREsgU3RhY2ssIG9yIHRocm91Z2ggdGhlIGVudmlyb25tZW50JyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnWW91IGNhbiByZXRyeSB5b3VyIGxhc3QgcmVxdWVzdCBhcyB0aGlzIGlzIG1vc3QgbGlrZWx5IGEgdHJhbnNpZW50IGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1jZGsvaXNzdWVzLzI0NzQ0LiBJZiB0aGUgZXJyb3IgcGVyc2lzdHMgZW5zdXJlIHlvdXIgbG9jYWwgQVdTIGNyZWRlbnRpYWxzIGFyZSB2YWxpZC4nLFxuICAgICAgZXJyb3JOYW1lOiAnQ0RLUmVzb2x2ZUFXU0FjY291bnRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IC9FQUNDRVMoLiopLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICdGaWxlIHBlcm1pc3Npb25zIGVycm9yJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnQ2hlY2sgdGhhdCB5b3UgaGF2ZSB0aGUgcmlnaHQgYWNjZXNzIHBlcm1pc3Npb25zIHRvIHRoZSBtZW50aW9uZWQgZmlsZScsXG4gICAgICBlcnJvck5hbWU6ICdGaWxlUGVybWlzc2lvbnNFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9FUEVSTTogb3BlcmF0aW9uIG5vdCBwZXJtaXR0ZWQsIHJlbmFtZSAoPzxmaWxlTmFtZT4oLiopXFwvc3ludGhcXC5sb2NrXFwuXFxTKykg4oaSICcoLiopXFwvc3ludGhcXC5sb2NrJy8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnTm90IHBlcm1pdHRlZCB0byByZW5hbWUgZmlsZToge2ZpbGVOYW1lfScsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYFRyeSBydW5uaW5nIHRoZSBjb21tYW5kIGFnYWluIGFuZCBlbnN1cmUgdGhhdCBvbmx5IG9uZSBpbnN0YW5jZSBvZiBzYW5kYm94IGlzIHJ1bm5pbmcuIElmIGl0IHN0aWxsIGRvZXNuJ3Qgd29yayBjaGVjayB0aGUgcGVybWlzc2lvbnMgb2YgJy5hbXBsaWZ5JyBmb2xkZXJgLFxuICAgICAgZXJyb3JOYW1lOiAnRmlsZVBlcm1pc3Npb25zRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvRVBFUk06IG9wZXJhdGlvbiBub3QgcGVybWl0dGVkLCBta2RpciAnKC4qKS5hbXBsaWZ5XFwvYXJ0aWZhY3RzXFwvY2RrLm91dCcvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogYE5vdCBwZXJtaXR0ZWQgdG8gY3JlYXRlIHRoZSBkaXJlY3RvcnkgJy5hbXBsaWZ5L2FydGlmYWN0cy9jZGsub3V0J2AsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYENoZWNrIHRoZSBwZXJtaXNzaW9ucyBvZiAnLmFtcGxpZnknIGZvbGRlciBhbmQgdHJ5IHJ1bm5pbmcgdGhlIGNvbW1hbmQgYWdhaW5gLFxuICAgICAgZXJyb3JOYW1lOiAnRmlsZVBlcm1pc3Npb25zRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvRVBFUk06IG9wZXJhdGlvbiBub3QgcGVybWl0dGVkLCAodW5saW5rfG9wZW4pICg/PGZpbGVOYW1lPiguKilcXC5sb2NrXFxTKykvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ09wZXJhdGlvbiBub3QgcGVybWl0dGVkIG9uIGZpbGU6IHtmaWxlTmFtZX0nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6IGBDaGVjayB0aGUgcGVybWlzc2lvbnMgb2YgJy5hbXBsaWZ5JyBmb2xkZXIgYW5kIHRyeSBydW5uaW5nIHRoZSBjb21tYW5kIGFnYWluYCxcbiAgICAgIGVycm9yTmFtZTogJ0ZpbGVQZXJtaXNzaW9uc0Vycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYFxcXFxbRVJSX01PRFVMRV9OT1RfRk9VTkRcXFxcXTooLiopJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fXxFcnJvcjogQ2Fubm90IGZpbmQgbW9kdWxlICguKilgXG4gICAgICApLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ0Nhbm5vdCBmaW5kIG1vZHVsZScsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ0NoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyIGZvciBtaXNzaW5nIGZpbGUgb3IgcGFja2FnZSBpbXBvcnRzLiBUcnkgaW5zdGFsbGluZyB0aGVtIHdpdGggeW91ciBwYWNrYWdlIG1hbmFnZXIuJyxcbiAgICAgIGVycm9yTmFtZTogJ01vZHVsZU5vdEZvdW5kRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUcnVuY2F0ZSB0aGUgY2RrIGVycm9yIG1lc3NhZ2UncyBzZWNvbmQgbGluZSAoSW52b2tlIHRoZSBDTEkgaW4gc2VxdWVuY2UsIG9yIHVzZSAnLS1vdXRwdXQnIHRvIHN5bnRoIGludG8gZGlmZmVyZW50IGRpcmVjdG9yaWVzLilcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9Bbm90aGVyIENMSSAoLiopIGlzIGN1cnJlbnRseSguKilcXC4gfE90aGVyIENMSXMgKC4qKSBhcmUgY3VycmVudGx5IHJlYWRpbmcgZnJvbSguKilcXC4gLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICdNdWx0aXBsZSBzYW5kYm94IGluc3RhbmNlcyBkZXRlY3RlZC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdNYWtlIHN1cmUgb25seSBvbmUgaW5zdGFuY2Ugb2Ygc2FuZGJveCBpcyBydW5uaW5nIGZvciB0aGlzIHByb2plY3QnLFxuICAgICAgZXJyb3JOYW1lOiAnTXVsdGlwbGVTYW5kYm94SW5zdGFuY2VzRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvSW52YWxpZFBhcmFtZXRlclZhbHVlRXhjZXB0aW9uOiguKikgKHNpemUgbXVzdCBiZSBzbWFsbGVyIHRoYW58ZXhjZWVkcyB0aGUgbWF4aW11bSBhbGxvd2VkIHNpemUgb2YpICg/PG1heFNpemU+XFxkKykgYnl0ZXMvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ01heGltdW0gTGFtYmRhIHNpemUgZXhjZWVkZWQnLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdNYWtlIHN1cmUgeW91ciBMYW1iZGEgYnVuZGxlZCBwYWNrYWdlcyB3aXRoIGxheWVycyBhbmQgZGVwZW5kZW5jaWVzIGlzIHNtYWxsZXIgdGhhbiB7bWF4U2l6ZX0gYnl0ZXMgdW56aXBwZWQuJyxcbiAgICAgIGVycm9yTmFtZTogJ0xhbWJkYU1heFNpemVFeGNlZWRlZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0ludmFsaWRQYXJhbWV0ZXJWYWx1ZUV4Y2VwdGlvbjogVXBsb2FkZWQgZmlsZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHppcC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnTGFtYmRhIGJ1bmRsZWQgaW50byBhbiBlbXB0eSB6aXAnLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6IGBUcnkgcmVtb3ZpbmcgJy5hbXBsaWZ5L2FydGlmYWN0cycgdGhlbiBydW5uaW5nIHRoZSBjb21tYW5kIGFnYWluLiBJZiBpdCBzdGlsbCBkb2Vzbid0IHdvcmssIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYXdzL2F3cy1jZGsvaXNzdWVzLzE4NDU5IGZvciBtb3JlIG1ldGhvZHMuYCxcbiAgICAgIGVycm9yTmFtZTogJ0xhbWJkYUVtcHR5WmlwRmF1bHQnLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdGQVVMVCcsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvVXNlcjooLiopIGlzIG5vdCBhdXRob3JpemVkIHRvIHBlcmZvcm06IGxhbWJkYTpHZXRMYXllclZlcnNpb24gb24gcmVzb3VyY2U6KC4qKSBiZWNhdXNlIG5vIHJlc291cmNlLWJhc2VkIHBvbGljeSBhbGxvd3MgdGhlIGxhbWJkYTpHZXRMYXllclZlcnNpb24gYWN0aW9uLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICdVbmFibGUgdG8gZ2V0IExhbWJkYSBsYXllciB2ZXJzaW9uJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnTWFrZSBzdXJlIGxheWVyIEFSTnMgYXJlIGNvcnJlY3QgYW5kIGxheWVyIHJlZ2lvbnMgbWF0Y2ggZnVuY3Rpb24gcmVnaW9uJyxcbiAgICAgIGVycm9yTmFtZTogJ0dldExhbWJkYUxheWVyVmVyc2lvbkVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy9UaGlzIGhhcyBzb21lIG92ZXJsYXAgd2l0aCBcIlVzZXI6X18gaXMgbm90IGF1dGhvcml6ZWQgdG8gcGVyZm9ybTpfXyBvbiByZXNvdXJjZTogX19cIiAtIHNvbWUgcmVzb3VyY2VzIGNhbm5vdCBiZSBkZWxldGVkIGR1ZSB0byBsYWNrIG9mIHBlcm1pc3Npb25zXG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvVGhlIHN0YWNrIG5hbWVkICg/PHN0YWNrTmFtZT4uKikgaXMgaW4gYSBmYWlsZWQgc3RhdGUuIFlvdSBtYXkgbmVlZCB0byBkZWxldGUgaXQgZnJvbSB0aGUgQVdTIGNvbnNvbGUgOiBERUxFVEVfRkFJTEVEIFxcKFRoZSBmb2xsb3dpbmcgcmVzb3VyY2VcXChzXFwpIGZhaWxlZCB0byBkZWxldGU6ICg/PHJlc291cmNlcz4uKikuIFxcKS8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVGhlIENsb3VkRm9ybWF0aW9uIGRlbGV0aW9uIGZhaWxlZCBkdWUgdG8ge3N0YWNrTmFtZX0gYmVpbmcgaW4gREVMRVRFX0ZBSUxFRCBzdGF0ZS4gRW5zdXJlIGFsbCB5b3VyIHJlc291cmNlcyBhcmUgYWJsZSB0byBiZSBkZWxldGVkJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnVGhlIGZvbGxvd2luZyByZXNvdXJjZShzKSBmYWlsZWQgdG8gZGVsZXRlOiB7cmVzb3VyY2VzfS4gQ2hlY2sgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIG1vcmUgZGV0YWlscyBhbmQgZW5zdXJlIHlvdXIgcmVzb3VyY2VzIGFyZSBpbiBhIHN0YXRlIHdoZXJlIHRoZXkgY2FuIGJlIGRlbGV0ZWQuIENoZWNrIHRoZSBDbG91ZEZvcm1hdGlvbiBBV1MgQ29uc29sZSBmb3IgdGhpcyBzdGFjayB0byBmaW5kIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uJyxcbiAgICAgIGVycm9yTmFtZTogJ0Nsb3VkRm9ybWF0aW9uRGVsZXRpb25FcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9Vc2VyOiguKikgaXMgbm90IGF1dGhvcml6ZWQgdG8gcGVyZm9ybTooLiopIG9uIHJlc291cmNlOig/PHJlc291cmNlPi4qKSBiZWNhdXNlIG5vIGlkZW50aXR5LWJhc2VkIHBvbGljeSBhbGxvd3MgdGhlICg/PGFjdGlvbj4uKikgYWN0aW9uLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVbmFibGUgdG8gZGVwbG95IGR1ZSB0byBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMnLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdFbnN1cmUgeW91IGhhdmUgcGVybWlzc2lvbnMgdG8gY2FsbCB7YWN0aW9ufSBmb3Ige3Jlc291cmNlfScsXG4gICAgICBlcnJvck5hbWU6ICdBY2Nlc3NEZW5pZWRFcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9Vc2VyOiguKikgaXMgbm90IGF1dGhvcml6ZWQgdG8gcGVyZm9ybTooPzxhY3Rpb24+LiopIG9uIHJlc291cmNlOig/PHJlc291cmNlPi4qKS8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGRlcGxveSBkdWUgdG8gaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnRW5zdXJlIHlvdSBoYXZlIHBlcm1pc3Npb25zIHRvIGNhbGwge2FjdGlvbn0gZm9yIHtyZXNvdXJjZX0nLFxuICAgICAgZXJyb3JOYW1lOiAnQWNjZXNzRGVuaWVkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBBbHNvIGV4dHJhY3RzIHRoZSBmaXJzdCBsaW5lIGluIHRoZSBzdGFjayB3aGVyZSB0aGUgZXJyb3IgaGFwcGVuZWRcbiAgICAgIGVycm9yUmVnZXg6IG5ldyBSZWdFeHAoXG4gICAgICAgIGBcXFxcW2VzYnVpbGQgRXJyb3JcXFxcXTogKCg/Oi58JHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSkqP2F0IC4qKWBcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnRVNCdWlsZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gQWxzbyBleHRyYWN0cyB0aGUgZmlyc3QgbGluZSBpbiB0aGUgc3RhY2sgd2hlcmUgdGhlIGVycm9yIGhhcHBlbmVkXG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgW+KcmFhdIFxcXFxbRVJST1JcXFxcXSAoKD86Lnwke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KSplcnJvci4qKWBcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnRVNCdWlsZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGVycm9ycywgY2FwdHVyZSBhbGwgbGluZXMgY29udGFpbmluZyB0aGUgZXJyb3JzXG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgKFxcXFxbVHJhbnNmb3JtRXJyb3JcXFxcXXxFcnJvcik6IFRyYW5zZm9ybSBmYWlsZWQgd2l0aCAuKiBlcnJvcihzPyk6JHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSg/PGVzQnVpbGRFcnJvck1lc3NhZ2U+KC4qRVJST1I6Lioke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KSspYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICd7ZXNCdWlsZEVycm9yTWVzc2FnZX0nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdGaXggdGhlIGFib3ZlIG1lbnRpb25lZCB0eXBlIG9yIHN5bnRheCBlcnJvciBpbiB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgZXJyb3JOYW1lOiAnRVNCdWlsZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gQ2FwdHVyZXMgb3RoZXIgZm9ybXMgb2YgdHJhbnNmb3JtIGVycm9yXG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgRXJyb3IgXFxcXFtUcmFuc2Zvcm1FcnJvclxcXFxdOigke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9fFxcXFxzKT8oPzxlc0J1aWxkRXJyb3JNZXNzYWdlPiguKigke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KT8pKylgXG4gICAgICApLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ3tlc0J1aWxkRXJyb3JNZXNzYWdlfScsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ01ha2Ugc3VyZSBlc2J1aWxkIGlzIGluc3RhbGxlZCBhbmQgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBwbGF0Zm9ybSB5b3UgYXJlIGN1cnJlbnRseSB1c2luZy4nLFxuICAgICAgZXJyb3JOYW1lOiAnRVNCdWlsZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogL0FtcGxpZnkgQmFja2VuZCBub3QgZm91bmQgaW4vLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTpcbiAgICAgICAgJ0JhY2tlbmQgZGVmaW5pdGlvbiBjb3VsZCBub3QgYmUgZm91bmQgaW4gYW1wbGlmeSBkaXJlY3RvcnkuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOiAnRW5zdXJlIHRoYXQgdGhlIGFtcGxpZnkvYmFja2VuZC4odHN8anMpIGZpbGUgZXhpc3RzJyxcbiAgICAgIGVycm9yTmFtZTogJ0ZpbGVDb252ZW50aW9uRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvQW1wbGlmeSAoLiopIG11c3QgYmUgZGVmaW5lZCBpbiAoLiopLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdGaWxlIG5hbWUgb3IgcGF0aCBmb3IgYmFja2VuZCBkZWZpbml0aW9uIGFyZSBpbmNvcnJlY3QuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOiAnRW5zdXJlIHRoYXQgdGhlIGFtcGxpZnkvYmFja2VuZC4odHN8anMpIGZpbGUgZXhpc3RzJyxcbiAgICAgIGVycm9yTmFtZTogJ0ZpbGVDb252ZW50aW9uRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvVXBkYXRlcyBhcmUgbm90IGFsbG93ZWQgZm9yIHByb3BlcnR5LyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgY2hhbmdlcyB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIGFwcGx5IGFyZSBub3Qgc3VwcG9ydGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1RoZSByZXNvdXJjZXMgcmVmZXJlbmNlZCBpbiB0aGUgZXJyb3IgbWVzc2FnZSBtdXN0IGJlIGRlbGV0ZWQgYW5kIHJlY3JlYXRlZCB0byBhcHBseSB0aGUgY2hhbmdlcy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQ0ZOVXBkYXRlTm90U3VwcG9ydGVkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUaGlzIGVycm9yIG9yaWdpbmF0ZXMgZnJvbSBDb2duaXRvIHNlcnZpY2Ugd2hlbiB1c2VyIHRyaWVzIHRvIGNoYW5nZSBVc2VyUG9vbCBhdHRyaWJ1dGVzIHdoaWNoIGlzIG5vdCBhbGxvd2VkXG4gICAgICAvLyBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29nbml0by9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1wb29sLXNldHRpbmdzLWF0dHJpYnV0ZXMuaHRtbFxuICAgICAgLy8gUmVtYXBwaW5nIHRvIGBVcGRhdGVOb3RTdXBwb3J0ZWRgIHdpbGwgYWxsb3cgc2FuZGJveCB0byBwcm9tcHQgdXNlcnMgZm9yIHJlc2V0dGluZyB0aGVpciBlbnZpcm9ubWVudFxuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0ludmFsaWQgQXR0cmlidXRlRGF0YVR5cGUgaW5wdXQsIGNvbnNpZGVyIHVzaW5nIHRoZSBwcm92aWRlZCBBdHRyaWJ1dGVEYXRhVHlwZSBlbnVtLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdVc2VyIHBvb2wgYXR0cmlidXRlcyBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBhIHVzZXIgcG9vbCBoYXMgYmVlbiBjcmVhdGVkLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTpcbiAgICAgICAgJ1RvIGNoYW5nZSB0aGVzZSBhdHRyaWJ1dGVzLCByZW1vdmUgYGRlZmluZUF1dGhgIGZyb20geW91ciBiYWNrZW5kLCBkZXBsb3ksIHRoZW4gYWRkIGl0IGJhY2suIE5vdGUgdGhhdCByZW1vdmluZyBgZGVmaW5lQXV0aGAgYW5kIGRlcGxveWluZyB3aWxsIGRlbGV0ZSBhbnkgdXNlcnMgc3RvcmVkIGluIHlvdXIgVXNlclBvb2wuJyxcbiAgICAgIGVycm9yTmFtZTogJ0NGTlVwZGF0ZU5vdFN1cHBvcnRlZEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYG5wbSBlcnJvciBjb2RlIEVKU09OUEFSU0Uke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9bnBtIGVycm9yIHBhdGggKD88ZmlsZVBhdGg+LiovcGFja2FnZVxcXFwuanNvbikke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9KG5wbSBlcnJvciAoLiopJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fSkqYFxuICAgICAgKSxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6ICdUaGUge2ZpbGVQYXRofSBpcyBub3QgYSB2YWxpZCBKU09OLicsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYENoZWNrIHBhY2thZ2UuanNvbiBmaWxlIGFuZCBtYWtlIHN1cmUgaXQgaXMgYSB2YWxpZCBKU09OLmAsXG4gICAgICBlcnJvck5hbWU6ICdJbnZhbGlkUGFja2FnZUpzb25FcnJvcicsXG4gICAgICBjbGFzc2lmaWNhdGlvbjogJ0VSUk9SJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IG5ldyBSZWdFeHAoXG4gICAgICAgIGAoPzxucG1FcnJvcj4obnBtIGVycm9yfG5wbSBFUlIhKSBjb2RlIEVOT0VOVCR7dGhpcy5tdWx0aUxpbmVFb2xSZWdleH0oKG5wbSBlcnJvcnxucG0gRVJSISkgKC4qKSR7dGhpcy5tdWx0aUxpbmVFb2xSZWdleH0pKilgXG4gICAgICApLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ05QTSBlcnJvciBvY2N1cnJlZDoge25wbUVycm9yfScsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYFNlZSBodHRwczovL2RvY3MubnBtanMuY29tL2NvbW1vbi1lcnJvcnMgZm9yIHJlc29sdXRpb24uYCxcbiAgICAgIGVycm9yTmFtZTogJ0NvbW1vbk5QTUVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gRXJyb3I6IC4qIGlzIHByaW50ZWQgdG8gc3RkZXJyIGR1cmluZyBjZGsgc3ludGhcbiAgICAgIC8vIEFsc28gZXh0cmFjdHMgdGhlIGZpcnN0IGxpbmUgaW4gdGhlIHN0YWNrIHdoZXJlIHRoZSBlcnJvciBoYXBwZW5lZFxuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYF5FcnJvcjogKC4qJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fS4qYXQuKilgLFxuICAgICAgICAnbSdcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQmFja2VuZFN5bnRoRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUaGlzIGhhcHBlbnMgd2hlbiAnZGVmaW5lQmFja2VuZCcgY2FsbCBpcyBtaXNzaW5nIGluIGN1c3RvbWVyJ3MgYXBwLlxuICAgICAgLy8gJ2RlZmluZUJhY2tlbmQnIGNyZWF0ZXMgQ0RLIGFwcCBpbiBtZW1vcnkuIElmIGl0J3MgbWlzc2luZyB0aGVuIG5vIGNkay5BcHAgZXhpc3RzIGluIG1lbW9yeSBhbmQgbm90aGluZyBpcyByZW5kZXJlZC5cbiAgICAgIC8vIER1cmluZyAnY2RrIHN5bnRoJyBDREsgQ0xJIGF0dGVtcHRzIHRvIHJlYWQgQ0RLIGFzc2VtYmx5IGFmdGVyIGNhbGxpbmcgY3VzdG9tZXIncyBhcHAuXG4gICAgICAvLyBCdXQgbm8gZmlsZXMgYXJlIHJlbmRlcmVkIGNhdXNpbmcgaXQgdG8gZmFpbC5cbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9FTk9FTlQ6IG5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnksIG9wZW4gJ1xcLmFtcGxpZnkuYXJ0aWZhY3RzLmNka1xcLm91dC5tYW5pZmVzdFxcLmpzb24nLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgQW1wbGlmeSBiYWNrZW5kIGRlZmluaXRpb24gaXMgbWlzc2luZyBgZGVmaW5lQmFja2VuZGAgY2FsbC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlci4gRW5zdXJlIHRoYXQgYGFtcGxpZnkvYmFja2VuZC50c2AgY29udGFpbnMgYGRlZmluZUJhY2tlbmRgIGNhbGwuJyxcbiAgICAgIGVycm9yTmFtZTogJ01pc3NpbmdEZWZpbmVCYWNrZW5kRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBcIkNhdGNoIGFsbFwiOiB0aGUgYmFja2VuZCBlbnRyeSBwb2ludCBmaWxlIGlzIHJlZmVyZW5jZWQgaW4gdGhlIHN0YWNrIGluZGljYXRpbmcgYSBwcm9ibGVtIGluIGN1c3RvbWVyIGNvZGVcbiAgICAgIGVycm9yUmVnZXg6IC9hbXBsaWZ5XFwvYmFja2VuZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiAnVW5hYmxlIHRvIGJ1aWxkIEFtcGxpZnkgYmFja2VuZC4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQmFja2VuZEJ1aWxkRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBXZSBjYXB0dXJlIHRoZSBwYXJhbWV0ZXIgbmFtZSB0byBzaG93IHJlbGV2YW50IGVycm9yIG1lc3NhZ2VcbiAgICAgIGVycm9yUmVnZXg6XG4gICAgICAgIC9GYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgKD88c2VjcmV0TmFtZT4uKikgZm9yLipQYXJhbWV0ZXJOb3RGb3VuZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiBgVGhlIHNlY3JldCB7c2VjcmV0TmFtZX0gc3BlY2lmaWVkIGluIHRoZSBiYWNrZW5kIGRvZXMgbm90IGV4aXN0LmAsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYENyZWF0ZSBzZWNyZXRzIHVzaW5nIHRoZSBjb21tYW5kICR7dGhpcy5mb3JtYXR0ZXIubm9ybWFsaXplQW1weENvbW1hbmQoXG4gICAgICAgICdzYW5kYm94IHNlY3JldCBzZXQnXG4gICAgICApfS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBodHRwczovL2RvY3MuYW1wbGlmeS5hd3MvZ2VuMi9kZXBsb3ktYW5kLWhvc3Qvc2FuZGJveC1lbnZpcm9ubWVudHMvZmVhdHVyZXMvI3NldC1zZWNyZXRzYCxcbiAgICAgIGVycm9yTmFtZTogJ1NlY3JldE5vdFNldEVycm9yJyxcbiAgICAgIGNsYXNzaWZpY2F0aW9uOiAnRVJST1InLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0JhZFJlcXVlc3RFeGNlcHRpb246IFRoZSBjb2RlIGNvbnRhaW5zIG9uZSBvciBtb3JlIGVycm9yc3xUaGUgY29kZSBjb250YWlucyBvbmUgb3IgbW9yZSBlcnJvcnMuKkFwcFN5bmMvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogYEEgY3VzdG9tIHJlc29sdmVyIHVzZWQgaW4geW91ciBkZWZpbmVEYXRhIGNvbnRhaW5zIG9uZSBvciBtb3JlIGVycm9yc2AsXG4gICAgICByZXNvbHV0aW9uTWVzc2FnZTogYENoZWNrIGZvciBhbnkgc3ludGF4IGVycm9ycyBpbiB5b3VyIGN1c3RvbSByZXNvbHZlcnMgY29kZS5gLFxuICAgICAgZXJyb3JOYW1lOiAnQXBwU3luY1Jlc29sdmVyU3ludGF4RXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgYW1wbGlmeS0uKi0oYnJhbmNofHNhbmRib3gpLS4qZmFpbDogKD88cHVibGlzaEZhaWx1cmU+LiopJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fS4qRmFpbGVkIHRvIHB1Ymxpc2ggYXNzZXRgLFxuICAgICAgICAnbSdcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOiBgQ0RLIGZhaWxlZCB0byBwdWJsaXNoIGFzc2V0cyBkdWUgdG8gJ3twdWJsaXNoRmFpbHVyZX0nYCxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOiBgQ2hlY2sgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIG1vcmUgZGV0YWlscy5gLFxuICAgICAgZXJyb3JOYW1lOiAnQ0RLQXNzZXRQdWJsaXNoRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICAvLyBHZW5lcmljIGVycm9yIHByaW50ZWQgYnkgQ0RLLiBPcmRlciBtYXR0ZXJzIHNvIGtlZXAgdGhpcyB0b3dhcmRzIHRoZSBib3R0b20gb2YgdGhpcyBsaXN0XG4gICAge1xuICAgICAgLy8gRXJyb3I6IC4qIGlzIHByaW50ZWQgdG8gc3RkZXJyIGR1cmluZyBjZGsgc3ludGhcbiAgICAgIC8vIEFsc28gZXh0cmFjdHMgdGhlIGZpcnN0IGxpbmUgaW4gdGhlIHN0YWNrIHdoZXJlIHRoZSBlcnJvciBoYXBwZW5lZFxuICAgICAgZXJyb3JSZWdleDogbmV3IFJlZ0V4cChcbiAgICAgICAgYF5FcnJvcjogKC4qJHt0aGlzLm11bHRpTGluZUVvbFJlZ2V4fS4qYXQuKilgLFxuICAgICAgICAnbSdcbiAgICAgICksXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3JNZXNzYWdlOlxuICAgICAgICAnVW5hYmxlIHRvIGJ1aWxkIHRoZSBBbXBsaWZ5IGJhY2tlbmQgZGVmaW5pdGlvbi4nLFxuICAgICAgcmVzb2x1dGlvbk1lc3NhZ2U6XG4gICAgICAgICdDaGVjayB5b3VyIGJhY2tlbmQgZGVmaW5pdGlvbiBpbiB0aGUgYGFtcGxpZnlgIGZvbGRlciBmb3Igc3ludGF4IGFuZCB0eXBlIGVycm9ycy4nLFxuICAgICAgZXJyb3JOYW1lOiAnQmFja2VuZFN5bnRoRXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OlxuICAgICAgICAvKD88c3RhY2tOYW1lPmFtcGxpZnktW2EtejAtOS1dKykoLiopIGZhaWxlZDogVmFsaWRhdGlvbkVycm9yOiBTdGFjazooLiopIGlzIGluICg/PHN0YXRlPi4qKSBzdGF0ZSBhbmQgY2FuIG5vdCBiZSB1cGRhdGVkLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvck1lc3NhZ2U6XG4gICAgICAgICdUaGUgQ2xvdWRGb3JtYXRpb24gZGVwbG95bWVudCBmYWlsZWQgZHVlIHRvIHtzdGFja05hbWV9IGJlaW5nIGluIHtzdGF0ZX0gc3RhdGUuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnRmluZCBtb3JlIGluZm9ybWF0aW9uIGluIHRoZSBDbG91ZEZvcm1hdGlvbiBBV1MgQ29uc29sZSBmb3IgdGhpcyBzdGFjay4nLFxuICAgICAgZXJyb3JOYW1lOiAnQ2xvdWRGb3JtYXRpb25EZXBsb3ltZW50RXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBOb3RlIHRoYXQgdGhlIG9yZGVyIG1hdHRlcnMsIHRoaXMgc2hvdWxkIGJlIHRoZSBsYXN0IGFzIGl0IGNhcHR1cmVzIGdlbmVyaWMgQ0ZOIGVycm9yXG4gICAgICBlcnJvclJlZ2V4OiBuZXcgUmVnRXhwKFxuICAgICAgICBgRGVwbG95bWVudCBmYWlsZWQ6ICguKikke3RoaXMubXVsdGlMaW5lRW9sUmVnZXh9fFRoZSBzdGFjayBuYW1lZCAoLiopIGZhaWxlZCAodG8gZGVwbG95OnxjcmVhdGlvbiwpICguKilgXG4gICAgICApLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yTWVzc2FnZTogJ1RoZSBDbG91ZEZvcm1hdGlvbiBkZXBsb3ltZW50IGhhcyBmYWlsZWQuJyxcbiAgICAgIHJlc29sdXRpb25NZXNzYWdlOlxuICAgICAgICAnRmluZCBtb3JlIGluZm9ybWF0aW9uIGluIHRoZSBDbG91ZEZvcm1hdGlvbiBBV1MgQ29uc29sZSBmb3IgdGhpcyBzdGFjay4nLFxuICAgICAgZXJyb3JOYW1lOiAnQ2xvdWRGb3JtYXRpb25EZXBsb3ltZW50RXJyb3InLFxuICAgICAgY2xhc3NpZmljYXRpb246ICdFUlJPUicsXG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IHR5cGUgQ0RLRGVwbG95bWVudEVycm9yID1cbiAgfCAnQWNjZXNzRGVuaWVkRXJyb3InXG4gIHwgJ0FwcFN5bmNSZXNvbHZlclN5bnRheEVycm9yJ1xuICB8ICdCYWNrZW5kQnVpbGRFcnJvcidcbiAgfCAnQmFja2VuZFN5bnRoRXJyb3InXG4gIHwgJ0Jvb3RzdHJhcE5vdERldGVjdGVkRXJyb3InXG4gIHwgJ0Jvb3RzdHJhcERldGVjdGlvbkVycm9yJ1xuICB8ICdCb290c3RyYXBPdXRkYXRlZEVycm9yJ1xuICB8ICdDREtBc3NldFB1Ymxpc2hFcnJvcidcbiAgfCAnQ0RLTm90Rm91bmRFcnJvcidcbiAgfCAnQ0RLUmVzb2x2ZUFXU0FjY291bnRFcnJvcidcbiAgfCAnQ0RLVmVyc2lvbk1pc21hdGNoRXJyb3InXG4gIHwgJ0NGTlVwZGF0ZU5vdFN1cHBvcnRlZEVycm9yJ1xuICB8ICdDbG91ZEZvcm1hdGlvbkRlbGV0aW9uRXJyb3InXG4gIHwgJ0Nsb3VkRm9ybWF0aW9uRGVwbG95bWVudEVycm9yJ1xuICB8ICdDb21tb25OUE1FcnJvcidcbiAgfCAnRmlsZVBlcm1pc3Npb25zRXJyb3InXG4gIHwgJ01pc3NpbmdEZWZpbmVCYWNrZW5kRXJyb3InXG4gIHwgJ011bHRpcGxlU2FuZGJveEluc3RhbmNlc0Vycm9yJ1xuICB8ICdFU0J1aWxkRXJyb3InXG4gIHwgJ0V4cGlyZWRUb2tlbkVycm9yJ1xuICB8ICdGaWxlQ29udmVudGlvbkVycm9yJ1xuICB8ICdNb2R1bGVOb3RGb3VuZEVycm9yJ1xuICB8ICdJbnZhbGlkUGFja2FnZUpzb25FcnJvcidcbiAgfCAnU2VjcmV0Tm90U2V0RXJyb3InXG4gIHwgJ1N5bnRheEVycm9yJ1xuICB8ICdHZXRMYW1iZGFMYXllclZlcnNpb25FcnJvcidcbiAgfCAnTGFtYmRhRW1wdHlaaXBGYXVsdCdcbiAgfCAnTGFtYmRhTWF4U2l6ZUV4Y2VlZGVkRXJyb3InO1xuIl19