import * as path from 'path';
import { UserPoolOperation, } from 'aws-cdk-lib/aws-cognito';
import { AmplifyUserError, TagName } from '@aws-amplify/platform-core';
import { AmplifyAuth, } from '@aws-amplify/auth-construct';
import { translateToAuthConstructLoginWith, translateToAuthConstructSenders, } from './translate_auth_props.js';
import { authAccessBuilder as _authAccessBuilder } from './access_builder.js';
import { AuthAccessPolicyArbiterFactory } from './auth_access_policy_arbiter.js';
import { UserPoolAccessPolicyFactory } from './userpool_access_policy_factory.js';
import { Stack, Tags } from 'aws-cdk-lib';
/**
 * Singleton factory for AmplifyAuth that can be used in Amplify project files.
 *
 * Exported for testing purpose only & should NOT be exported out of the package.
 */
export class AmplifyAuthFactory {
    props;
    importStack;
    // publicly accessible for testing purpose only.
    static factoryCount = 0;
    provides = 'AuthResources';
    generator;
    /**
     * Set the properties that will be used to initialize AmplifyAuth
     */
    constructor(props, 
    // eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
    importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
        if (AmplifyAuthFactory.factoryCount > 0) {
            throw new AmplifyUserError('MultipleSingletonResourcesError', {
                message: 'Multiple `defineAuth` or `referenceAuth` calls are not allowed within an Amplify backend',
                resolution: 'Remove all but one `defineAuth` or `referenceAuth` call',
            });
        }
        AmplifyAuthFactory.factoryCount++;
    }
    /**
     * Get a singleton instance of AmplifyAuth
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier, resourceNameValidator } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'auth', 'resource'), 'Amplify Auth must be defined in amplify/auth/resource.ts');
        if (this.props.name) {
            resourceNameValidator?.validate(this.props.name);
        }
        if (!this.generator) {
            this.generator = new AmplifyAuthGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyAuthGenerator {
    props;
    getInstanceProps;
    authAccessBuilder;
    authAccessPolicyArbiterFactory;
    resourceGroupName = 'auth';
    name;
    constructor(props, getInstanceProps, authAccessBuilder = _authAccessBuilder, authAccessPolicyArbiterFactory = new AuthAccessPolicyArbiterFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.authAccessBuilder = authAccessBuilder;
        this.authAccessPolicyArbiterFactory = authAccessPolicyArbiterFactory;
        this.name = props.name ?? 'amplifyAuth';
    }
    generateContainerEntry = ({ scope, backendSecretResolver, ssmEnvironmentEntriesGenerator, stableBackendIdentifiers, }) => {
        const authProps = {
            ...this.props,
            loginWith: translateToAuthConstructLoginWith(this.props.loginWith, backendSecretResolver),
            senders: translateToAuthConstructSenders(this.props.senders, this.getInstanceProps),
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        };
        if (authProps.loginWith.externalProviders) {
            authProps.loginWith.externalProviders.domainPrefix =
                stableBackendIdentifiers.getStableBackendHash();
        }
        let authConstruct;
        try {
            authConstruct = new AmplifyAuth(scope, this.name, authProps);
        }
        catch (error) {
            throw new AmplifyUserError('AmplifyAuthConstructInitializationError', {
                message: 'Failed to instantiate auth construct',
                resolution: 'See the underlying error message for more details.',
            }, error);
        }
        Tags.of(authConstruct).add(TagName.FRIENDLY_NAME, this.name);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            authConstruct.resources.userPool.addTrigger(UserPoolOperation.of(triggerEvent), handlerFactory.getInstance(this.getInstanceProps).resources.lambda);
        });
        const authConstructMixin = {
            ...authConstruct,
            /**
             * Returns a resourceAccessAcceptor for the given role
             * @param roleIdentifier Either the auth or unauth role name or the name of a UserPool group
             */
            getResourceAccessAcceptor: (roleIdentifier) => ({
                identifier: `${roleIdentifier}ResourceAccessAcceptor`,
                acceptResourceAccess: (policy) => {
                    const role = roleNameIsAuthRoleName(roleIdentifier)
                        ? authConstruct.resources[roleIdentifier]
                        : authConstruct.resources.groups?.[roleIdentifier]?.role;
                    if (!role) {
                        throw new AmplifyUserError('InvalidResourceAccessConfigError', {
                            message: `No auth IAM role found for "${roleIdentifier}".`,
                            resolution: `If you are trying to configure UserPool group access, ensure that the group name is specified correctly.`,
                        });
                    }
                    policy.attachToRole(role);
                },
            }),
            stack: Stack.of(authConstruct),
        };
        if (!this.props.access) {
            return authConstructMixin;
        }
        // props.access is the access callback defined by the customer
        // here we inject the authAccessBuilder into the callback and run it
        // this produces the access definition that will be used to create the auth access policies
        const accessDefinition = this.props.access(this.authAccessBuilder);
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.name}_USERPOOL_ID`]: authConstructMixin.resources.userPool.userPoolId,
        });
        const authPolicyArbiter = this.authAccessPolicyArbiterFactory.getInstance(accessDefinition, this.getInstanceProps, ssmEnvironmentEntries, new UserPoolAccessPolicyFactory(authConstruct.resources.userPool));
        authPolicyArbiter.arbitratePolicies();
        return authConstructMixin;
    };
}
const roleNameIsAuthRoleName = (roleName) => {
    return (roleName === 'authenticatedUserIamRole' ||
        roleName === 'unauthenticatedUserIamRole');
};
/**
 * Provide the settings that will be used for authentication.
 */
export const defineAuth = (props) => 
// eslint-disable-next-line amplify-backend-rules/prefer-amplify-errors
new AmplifyAuthFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,