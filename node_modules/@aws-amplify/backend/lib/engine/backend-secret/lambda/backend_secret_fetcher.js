import { getSecretClient, } from '@aws-amplify/backend-secret';
import { randomUUID } from 'node:crypto';
const secretClient = getSecretClient();
/**
 * Entry point for the lambda-backend custom resource to retrieve a backend secret.
 */
export const handler = async (event) => {
    console.info(`Received '${event.RequestType}' event`);
    const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
    let data = undefined;
    if (event.RequestType === 'Update' || event.RequestType === 'Create') {
        const secretMap = await handleCreateUpdateEvent(secretClient, event);
        data = {
            ...secretMap,
        };
    }
    return {
        RequestId: event.RequestId,
        LogicalResourceId: event.LogicalResourceId,
        PhysicalResourceId: physicalId,
        Data: data,
        StackId: event.StackId,
        NoEcho: true,
        Status: 'SUCCESS',
    };
};
/**
 * Handles create/update event for the secret custom resource.
 */
export const handleCreateUpdateEvent = async (secretClient, event) => {
    const props = event.ResourceProperties;
    const secretMap = {};
    for (const secretName of props.secretNames) {
        let secretValue = undefined;
        try {
            const resp = await secretClient.getSecret({
                namespace: props.namespace,
                name: props.name,
                type: props.type,
            }, {
                name: secretName,
            });
            secretValue = resp.value;
        }
        catch (err) {
            const secretErr = err;
            if (secretErr.httpStatusCode && secretErr.httpStatusCode >= 500) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}/${props.name}'. Reason: ${JSON.stringify(err)}`);
            }
        }
        // if the secret is not available in branch path, try retrieving it at the app-level.
        if (!secretValue) {
            try {
                const resp = await secretClient.getSecret(props.namespace, {
                    name: secretName,
                });
                secretValue = resp.value;
            }
            catch (err) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}'. Reason: ${JSON.stringify(err)}`);
            }
        }
        if (!secretValue) {
            throw new Error(`Unable to find backend secret for backend '${props.namespace}', branch '${props.name}', name '${secretName}'`);
        }
        // store the secret->secretValue pair in the secret map
        secretMap[secretName] = secretValue;
    }
    return secretMap;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbmdpbmUvYmFja2VuZC1zZWNyZXQvbGFtYmRhL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUdMLGVBQWUsR0FDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3pDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDYyxFQUFFO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsV0FBVyxTQUFTLENBQUMsQ0FBQztJQUV0RCxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRSxJQUFJLElBQUksR0FBdUMsU0FBUyxDQUFDO0lBQ3pELElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDcEUsTUFBTSxTQUFTLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckUsSUFBSSxHQUFHO1lBQ0wsR0FBRyxTQUFTO1NBQ2IsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztRQUMxQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1FBQzFDLGtCQUFrQixFQUFFLFVBQVU7UUFDOUIsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsTUFBTSxFQUFFLElBQUk7UUFDWixNQUFNLEVBQUUsU0FBUztLQUM2QixDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxFQUMxQyxZQUEwQixFQUMxQixLQUF3QyxFQUNQLEVBQUU7SUFDbkMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLGtCQUFvRCxDQUFDO0lBQ3pFLE1BQU0sU0FBUyxHQUEyQixFQUFFLENBQUM7SUFDN0MsS0FBSyxNQUFNLFVBQVUsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1FBQzFDLElBQUksV0FBVyxHQUF1QixTQUFTLENBQUM7UUFDaEQsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FDdkM7Z0JBQ0UsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO2dCQUMxQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ2hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTthQUNqQixFQUNEO2dCQUNFLElBQUksRUFBRSxVQUFVO2FBQ2pCLENBQ0YsQ0FBQztZQUNGLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLFNBQVMsR0FBRyxHQUFrQixDQUFDO1lBQ3JDLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxTQUFTLENBQUMsY0FBYyxJQUFJLEdBQUcsRUFBRTtnQkFDL0QsTUFBTSxJQUFJLEtBQUssQ0FDYixzQ0FBc0MsVUFBVSxVQUM5QyxLQUFLLENBQUMsU0FDUixJQUFJLEtBQUssQ0FBQyxJQUFJLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNsRCxDQUFDO2FBQ0g7U0FDRjtRQUVELHFGQUFxRjtRQUNyRixJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2hCLElBQUk7Z0JBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7b0JBQ3pELElBQUksRUFBRSxVQUFVO2lCQUNqQixDQUFDLENBQUM7Z0JBQ0gsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDMUI7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxVQUFVLFVBQzlDLEtBQUssQ0FBQyxTQUNSLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNwQyxDQUFDO2FBQ0g7U0FDRjtRQUVELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDYiw4Q0FBOEMsS0FBSyxDQUFDLFNBQVMsY0FBYyxLQUFLLENBQUMsSUFBSSxZQUFZLFVBQVUsR0FBRyxDQUMvRyxDQUFDO1NBQ0g7UUFFRCx1REFBdUQ7UUFDdkQsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztLQUNyQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCxcbiAgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZSxcbn0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQge1xuICBTZWNyZXRDbGllbnQsXG4gIFNlY3JldEVycm9yLFxuICBnZXRTZWNyZXRDbGllbnQsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnbm9kZTpjcnlwdG8nO1xuaW1wb3J0IHsgU2VjcmV0UmVzb3VyY2VQcm9wcyB9IGZyb20gJy4vYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl90eXBlcy5qcyc7XG5cbmNvbnN0IHNlY3JldENsaWVudCA9IGdldFNlY3JldENsaWVudCgpO1xuXG4vKipcbiAqIEVudHJ5IHBvaW50IGZvciB0aGUgbGFtYmRhLWJhY2tlbmQgY3VzdG9tIHJlc291cmNlIHRvIHJldHJpZXZlIGEgYmFja2VuZCBzZWNyZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKFxuICBldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50XG4pOiBQcm9taXNlPENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2U+ID0+IHtcbiAgY29uc29sZS5pbmZvKGBSZWNlaXZlZCAnJHtldmVudC5SZXF1ZXN0VHlwZX0nIGV2ZW50YCk7XG5cbiAgY29uc3QgcGh5c2ljYWxJZCA9XG4gICAgZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdDcmVhdGUnID8gcmFuZG9tVVVJRCgpIDogZXZlbnQuUGh5c2ljYWxSZXNvdXJjZUlkO1xuICBsZXQgZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgaWYgKGV2ZW50LlJlcXVlc3RUeXBlID09PSAnVXBkYXRlJyB8fCBldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ0NyZWF0ZScpIHtcbiAgICBjb25zdCBzZWNyZXRNYXAgPSBhd2FpdCBoYW5kbGVDcmVhdGVVcGRhdGVFdmVudChzZWNyZXRDbGllbnQsIGV2ZW50KTtcbiAgICBkYXRhID0ge1xuICAgICAgLi4uc2VjcmV0TWFwLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFJlcXVlc3RJZDogZXZlbnQuUmVxdWVzdElkLFxuICAgIExvZ2ljYWxSZXNvdXJjZUlkOiBldmVudC5Mb2dpY2FsUmVzb3VyY2VJZCxcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6IHBoeXNpY2FsSWQsXG4gICAgRGF0YTogZGF0YSxcbiAgICBTdGFja0lkOiBldmVudC5TdGFja0lkLFxuICAgIE5vRWNobzogdHJ1ZSxcbiAgICBTdGF0dXM6ICdTVUNDRVNTJyxcbiAgfSBhcyBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlU3VjY2Vzc1Jlc3BvbnNlO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGNyZWF0ZS91cGRhdGUgZXZlbnQgZm9yIHRoZSBzZWNyZXQgY3VzdG9tIHJlc291cmNlLlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlQ3JlYXRlVXBkYXRlRXZlbnQgPSBhc3luYyAoXG4gIHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICBldmVudDogQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50XG4pOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0+IHtcbiAgY29uc3QgcHJvcHMgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMgYXMgdW5rbm93biBhcyBTZWNyZXRSZXNvdXJjZVByb3BzO1xuICBjb25zdCBzZWNyZXRNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgZm9yIChjb25zdCBzZWNyZXROYW1lIG9mIHByb3BzLnNlY3JldE5hbWVzKSB7XG4gICAgbGV0IHNlY3JldFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBzZWNyZXRDbGllbnQuZ2V0U2VjcmV0KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZXNwYWNlOiBwcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICB0eXBlOiBwcm9wcy50eXBlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogc2VjcmV0TmFtZSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIHNlY3JldFZhbHVlID0gcmVzcC52YWx1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IHNlY3JldEVyciA9IGVyciBhcyBTZWNyZXRFcnJvcjtcbiAgICAgIGlmIChzZWNyZXRFcnIuaHR0cFN0YXR1c0NvZGUgJiYgc2VjcmV0RXJyLmh0dHBTdGF0dXNDb2RlID49IDUwMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byByZXRyaWV2ZSBiYWNrZW5kIHNlY3JldCAnJHtzZWNyZXROYW1lfScgZm9yICcke1xuICAgICAgICAgICAgcHJvcHMubmFtZXNwYWNlXG4gICAgICAgICAgfS8ke3Byb3BzLm5hbWV9Jy4gUmVhc29uOiAke0pTT04uc3RyaW5naWZ5KGVycil9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHRoZSBzZWNyZXQgaXMgbm90IGF2YWlsYWJsZSBpbiBicmFuY2ggcGF0aCwgdHJ5IHJldHJpZXZpbmcgaXQgYXQgdGhlIGFwcC1sZXZlbC5cbiAgICBpZiAoIXNlY3JldFZhbHVlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgc2VjcmV0Q2xpZW50LmdldFNlY3JldChwcm9wcy5uYW1lc3BhY2UsIHtcbiAgICAgICAgICBuYW1lOiBzZWNyZXROYW1lLFxuICAgICAgICB9KTtcbiAgICAgICAgc2VjcmV0VmFsdWUgPSByZXNwLnZhbHVlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIHJldHJpZXZlIGJhY2tlbmQgc2VjcmV0ICcke3NlY3JldE5hbWV9JyBmb3IgJyR7XG4gICAgICAgICAgICBwcm9wcy5uYW1lc3BhY2VcbiAgICAgICAgICB9Jy4gUmVhc29uOiAke0pTT04uc3RyaW5naWZ5KGVycil9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2VjcmV0VmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFVuYWJsZSB0byBmaW5kIGJhY2tlbmQgc2VjcmV0IGZvciBiYWNrZW5kICcke3Byb3BzLm5hbWVzcGFjZX0nLCBicmFuY2ggJyR7cHJvcHMubmFtZX0nLCBuYW1lICcke3NlY3JldE5hbWV9J2BcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc3RvcmUgdGhlIHNlY3JldC0+c2VjcmV0VmFsdWUgcGFpciBpbiB0aGUgc2VjcmV0IG1hcFxuICAgIHNlY3JldE1hcFtzZWNyZXROYW1lXSA9IHNlY3JldFZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlY3JldE1hcDtcbn07XG4iXX0=